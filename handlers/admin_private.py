from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from db.pg_orm_query import orm_count_users, orm_get_mailing_list, orm_get_required_channels, orm_is_required_channel, \
    orm_change_required_channel, orm_get_users_with_giveaways, orm_get_user_giveaways, orm_get_giveaway_by_id, \
    orm_get_top_giveaways_by_participants, orm_get_last_giveaway_id
from db.r_operations import (redis_set_mailing_users, redis_set_mailing_msg, redis_set_msg_from,
                             redis_set_mailing_btns, get_active_users_count, redis_get_participants_count)
from filters.chat_type import ChatType
from filters.is_admin import IsAdmin
from handlers.giveaway_interaction_router import status_mapping
from keyboards.inline import get_callback_btns
from keyboards.reply import get_keyboard, admin_kb
from tools.giveaway_utils import get_giveaway_post
from tools.mailing import simple_mailing
from tools.texts import cbk_msg, format_giveaways_for_admin
from tools.utils import msg_to_cbk, channel_info, get_user_creds

admin_private_router = Router()
admin_private_router.message.filter(ChatType("private"), IsAdmin())


@admin_private_router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def get_profile(message: Message, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        count = await orm_count_users(session)
        required_channels = await orm_get_required_channels(session)
        channels_str = '\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ—Å—Ç–∏–Ω–≥":\n'
        for channel in required_channels:
            chat = await bot.get_chat(channel.channel_id)
            channels_str += f"üîπ<a href='{chat.invite_link}'>{chat.title}</a>\n"
        admin_text = (
            f"üë•\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{count}</b> —á–µ–ª–æ–≤–µ–∫.. \n"
            f"\n"
            f"üéÅ\n–ë—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ <b>{await orm_get_last_giveaway_id(session)}</b> —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n\n"
        )

        active_users_day = await get_active_users_count(1)
        active_users_week = await get_active_users_count(7)
        active_users_month = await get_active_users_count(30)

        admin_text += (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\nüë•üóì\n"
                       f"–î–µ–Ω—å: {active_users_day}\n"
                       f"–ù–µ–¥–µ–ª—è: {active_users_week}\n"
                       f"–ú–µ—Å—è—Ü: {active_users_month}"
                       f"{channels_str}"
                       )
    await message.answer(admin_text, reply_markup=await admin_kb())


@admin_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await admin_kb())


class Mailing(StatesGroup):
    message = State()
    buttons = State()


# Mailing handlers starts
@admin_private_router.message(StateFilter(None), F.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def make_mailing(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å\n\n"
                         "<b>–í–ê–ñ–ù–û</b>\n\n"
                         "–í —Ä–∞—Å—Å—ã–ª–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ <u>–æ–¥–∏–Ω</u> —Ñ–∞–π–ª*!\n"
                         "<i>–§–∞–π–ª‚Äî —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                         reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞",
                                                   placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
                                                   )
                         )
    await state.set_state(Mailing.message)


@admin_private_router.message(StateFilter(Mailing.message))
async def get_message_for_mailing(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(Mailing.buttons)
    await message.reply("–ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å URL-–∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", reply_markup=await get_callback_btns(
        btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏": "add_btns",
              "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ": "confirm_mailing", "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏": "cancel_mailing"}
    )
                        )


@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "add_btns")
async def add_btns_mailing(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer(cbk_msg)


@admin_private_router.message(StateFilter(Mailing.buttons), F.text.contains(":"))
async def btns_to_data(message: Message, state: FSMContext):
    await state.update_data(buttons=await msg_to_cbk(message))
    data = await state.get_data()
    await message.answer(f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:"
                         f"\n‚¨áÔ∏è")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=data[
        "message"],
                           reply_markup=await get_callback_btns(btns=data["buttons"]))
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
                         reply_markup=await get_callback_btns(btns={"–î–∞": "confirm_mailing",
                                                                    "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_mailing"}))


@admin_private_router.callback_query(StateFilter(Mailing.message), F.data == "cancel_mailing")
@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "cancel_mailing")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    current_state = await state.get_state()

    if current_state is not None:
        await state.set_state(Mailing.message)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å")


@admin_private_router.callback_query(StateFilter("*"), F.data == "confirm_mailing")
async def confirm_mailing(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.from_user.id):
        await callback.answer("")
        await redis_set_mailing_users(await orm_get_mailing_list(session))
        data = await state.get_data()
        await redis_set_mailing_msg(str(data.get("message")))
        await redis_set_msg_from(str(callback.message.chat.id))
        await redis_set_mailing_btns(data.get("buttons"))
        await state.clear()

        success, notsuccess, blocked, elapsed_time_str = await simple_mailing()
        if elapsed_time_str == "":
            elapsed_time_str = "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"

        await callback.message.answer(
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–£—Å–ø–µ—à–Ω–æ - {success}\n–ù–µ—É–¥–∞—á–Ω–æ - {notsuccess}\n\n"
                 f"–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: <b>{elapsed_time_str}</b>\n\n"
                 f"<span class='tg-spoiler'>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {blocked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)</span>",
            reply_markup=get_keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        )


# Mailing handlers ends


@admin_private_router.callback_query(F.data.startswith("required_status_"))
async def change_required_status(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("")
    channel_id = int(callback.data.split("_")[-1])
    channel = await channel_info(channel_id=channel_id)
    required = await orm_is_required_channel(session, channel_id)
    print(type(required))
    print(required)

    text = f"–ö–∞–Ω–∞–ª {channel.title} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {'' if required else '–Ω–µ'}–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è " \
           f"–ø–æ—Å—Ç–∏–Ω–≥–∞"
    await callback.message.answer(text=text,
                                  reply_markup=await get_callback_btns(btns={
                                      f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ {'–Ω–µ' if required else ''}–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π":
                                          f"change_required_status_{channel_id}_{required}"
                                  }))


@admin_private_router.callback_query(F.data.startswith("change_required_status_"))
async def change_required_status(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("")
    channel_id = int(callback.data.split("_")[-2])
    status = str(callback.data.split("_")[-1])
    print(type(status))
    print(status)
    channel = await channel_info(channel_id=channel_id)
    if status == "True":
        required = False
    else:
        required = True
    await orm_change_required_channel(session, channel_id, required)
    text = f"–ö–∞–Ω–∞–ª {channel.title} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {'' if required else '–Ω–µ'}–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è " \
           f"–ø–æ—Å—Ç–∏–Ω–≥–∞"
    await callback.message.answer(text=text,
                                  reply_markup=await admin_kb()
                                  )


@admin_private_router.message(F.text == "–†–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def get_users_giveaways(message: Message, session: AsyncSession):
    users = await orm_get_users_with_giveaways(session)
    initial_text = "<b>üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏</b>\n\n"
    text = initial_text
    messages = []
    limit = 4096

    for user in users:
        user_text = (f"/user_{user.user_id} <a href='tg://user?id={user.user_id}'"
                     f">{'@' + user.username if user.username else 'id' + str(user.user_id)}</a>\n")
        if len(text) + len(user_text) > limit:
            messages.append(text)
            text = initial_text + user_text
        else:
            text += user_text

    messages.append(text)

    for msg in messages:
        await message.answer(msg)


@admin_private_router.message(F.text.startswith("/user_"))
async def get_user_giveaways(message: Message, session: AsyncSession):
    user_id = int(message.text.split("_")[-1])
    user_givs = await format_giveaways_for_admin(await orm_get_user_giveaways(session=session, user_id=user_id))
    initial_text = f"<b>–†–æ–∑—ã–≥—Ä—ã—à–∏ <u><a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a></u></b>\n\n"
    text = initial_text
    messages = []
    limit = 4096
    if not user_givs:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!")
        return
    for giv in user_givs:
        giv_text = f"{giv}\n"
        if len(text) + len(giv_text) > limit:
            messages.append(text)
            text = initial_text + giv_text
        else:
            text += giv_text

    messages.append(text)
    for msg in messages:
        await message.answer(msg)


@admin_private_router.message(F.text.startswith("/usergive"))
async def get_user_giveaway(message: Message, session: AsyncSession):
    giveaway_id = int(message.text.split("/usergive")[1].strip())
    giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)
    status = status_mapping.get(giveaway.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    post_url = giveaway.post_url
    participants_count = giveaway.participants_count if status == "–ó–∞–≤–µ—Ä—à—ë–Ω" else await redis_get_participants_count(
        giveaway_id)
    winners_count = giveaway.winners_count
    end_count = giveaway.end_count
    end_datetime = giveaway.end_datetime.strftime('%d.%m.%Y %H:%M') if giveaway.end_datetime else None
    post_datetime = giveaway.post_datetime.strftime('%d.%m.%Y %H:%M')
    await message.answer("–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    if status == "‚è≥ –ñ–¥—ë—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏":
        await get_giveaway_post(giveaway, message.from_user.id)
    if status == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" or status == "‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω":
        await get_giveaway_post(giveaway, message.from_user.id)
    text = (f"<b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ</b>{giveaway_id}\n"
            f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b> {await get_user_creds(giveaway.user_id)}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º: <a href='{post_url}'>–°—Å—ã–ª–∫–∞</a>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}\n"
            f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_datetime}\n")

    if end_count:
        text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {end_count}\n"
    if end_datetime:
        text += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_datetime}\n"
    btns = {}
    if status == "‚è≥ –ñ–¥—ë—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" or status == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω":
        btns.update({"–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞": f"change_end_condition_{giveaway_id}"})
    if status == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω":
        btns.update({"–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å": f"finish_giveaway_{giveaway_id}"})
    if status == "‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω":
        btns.update({"–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": f"get_result_link_{giveaway_id}"})
        btns.update({"–í—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π": f"add_winners_{giveaway_id}"})
    btns.update({"–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à": f"delete_giveaway_{giveaway_id}"})
    await message.answer(text, reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))


@admin_private_router.message(F.text == "–¢–æ–ø –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
async def get_top_finished_giveaways(message: Message, session: AsyncSession):
    top_finished_giveaways = await orm_get_top_giveaways_by_participants(session=session)
    if not top_finished_giveaways:
        await message.answer("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!")
        return
    initial_text = "<b>üèÜ–¢–æ–ø –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</b>\n\n"
    text = initial_text
    messages = []
    limit = 4096
    places = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    for i, giv in enumerate(top_finished_giveaways):
        giv_text = (f"{places[i]} /usergive{giv.id} <b>{giv.participants_count}</b>üë• | by: "
                    f"{await get_user_creds(giv.user_id)}\n")

        if len(text) + len(giv_text) > limit:
            messages.append(text)
            text = initial_text + giv_text
        else:
            text += giv_text

    messages.append(text)
    for msg in messages:
        await message.answer(msg)


# @admin_private_router.message(F.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
# async def get_active_giveaways(message: Message, session: AsyncSession):
#     active_giveaways = await orm_get_active_giveaways(session=session)
#     if not active_giveaways:
#         await message.answer("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!")
#         return
#     text = format_giveaways(active_giveaways)
#     await message.answer(text)

