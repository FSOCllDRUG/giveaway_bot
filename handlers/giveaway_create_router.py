import asyncio
from collections import defaultdict
from datetime import datetime, timedelta

import pytz
from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from db.pg_orm_query import orm_get_channels_for_admin, orm_create_giveaway
from filters.chat_type import ChatType
from keyboards.inline import get_callback_btns, captcha_toggle
from tools.giveaway_utils import get_giveaway_preview, get_channel_hyperlink, \
    get_giveaway_info_text
from tools.texts import datetime_example, captcha_on_text, captcha_off_text
from tools.utils import channel_info, remove_premium_emoji_tags

giveaway_create_router = Router()
giveaway_create_router.message.filter(ChatType("private"))

user_locks = defaultdict(asyncio.Lock)


class CreateGiveaway(StatesGroup):
    media_type = State()
    media = State()
    text = State()
    button = State()
    sponsor_channels = State()
    winners_count = State()
    channel_id = State()
    extra_conditions = State()
    post_datetime = State()
    end_datetime = State()
    end_count = State()
    captcha = State()
    media_group_id = State()  # To avoid sending warning about "only one media" more than once


@giveaway_create_router.message(Command("new_give"))
@giveaway_create_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
async def create_giveaway(message: Message, state: FSMContext, session: AsyncSession):
    if not await orm_get_channels_for_admin(session=session, admin_user_id=message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n\n"
                             "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"
                             " –≤–≤–µ–¥–∏—Ç–µ /my_channels")
        return
    else:
        await state.clear()
        await state.set_state(CreateGiveaway.media_type)
        await message.answer("<b>–°–û–ó–î–ê–ù–ò–ï –†–û–ó–´–ì–†–´–®–ê!</b>\n\n"
                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
                             "–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ GIF!\n\n"
                             "<b>‚ùóÔ∏è –í–∞–∂–Ω–æ:</b>\n"
                             "<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª.</i>",
                             reply_markup=await get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel"}))
    # await state.update_data(media_warned=0)


@giveaway_create_router.message(StateFilter(CreateGiveaway.media_type))
async def create_giveaway_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with user_locks[user_id]:
        data = await state.get_data()
        media_group_id = data.get("media_group_id")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ media_group_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.media_group_id:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ media_group_id —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if media_group_id == message.media_group_id:
                return
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º media_group_id –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
            await state.update_data(media_group_id=message.media_group_id)
            await message.answer("‚ùóÔ∏è –í–∞–∂–Ω–æ:\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª.")
            return
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            await state.update_data(media_group_id=None)

    await state.update_data(message=message.message_id)
    if message.photo:
        media_id = message.photo[-1].file_id
        await state.update_data(media_type="photo")
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    elif message.video:
        media_id = message.video.file_id
        await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        await state.update_data(media_type="video")

    elif message.animation:
        media_id = message.animation.file_id
        await message.answer("‚úÖ GIF —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.update_data(media_type="animation")
    else:
        media_id = None

    if media_id is not None:
        await state.update_data(media=media_id)
    if message.text:
        text = await remove_premium_emoji_tags(message.html_text)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    elif message.caption:
        text = await remove_premium_emoji_tags(message.html_text)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        text = ""
    await state.update_data(text=text)
    await state.set_state(CreateGiveaway.button)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç,–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ.\n"
                         "–õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
                         reply_markup=await get_callback_btns(btns={"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å": "join_1",
                                                                    "–£—á–∞—Å—Ç–≤—É—é!": "join_2",
                                                                    "–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ": "join_3",
                                                                    }))


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.button), F.data.startswith("join_"))
async def create_giveaway_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    join = int(callback.data.split("_")[-1])
    if join == 1:
        button = "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
    elif join == 2:
        button = "–£—á–∞—Å—Ç–≤—É—é!"
    else:
        button = "–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ"
    await state.update_data(button=button)
    await state.set_state(CreateGiveaway.sponsor_channels)
    await callback.message.answer("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await callback.message.answer("üìä –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è "
                                  "–¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n"
                                  "<b>‚ùóÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à, "
                                  "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</b>\n\n"

                                  "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ:\n"
                                  "1. <b>–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞</b> (@WinGiveBot)\n"
                                  "–≤ –í–∞—à –∫–∞–Ω–∞–ª <u>–≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</u>\n"
                                  "(—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª).\n"
                                  "2. <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–∞–Ω–∞–ª\n"
                                  "–≤ —Ñ–æ—Ä–º–∞—Ç–µ</b> @channelname ‚ùóÔ∏è\n"
                                  "(–∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞).\n\n"

                                  "‚ö†Ô∏è<b>–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –±—ã–ª–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª, "
                                  "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>",
                                  reply_markup=await get_callback_btns(
                                      btns={"–†–æ–∑—ã–≥—Ä—ã—à –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫": "finish_sponsors"}))


@giveaway_create_router.message(StateFilter(CreateGiveaway.button), F.text)
async def create_giveaway_own_button(message: Message, state: FSMContext):
    await state.update_data(button=message.text)
    await state.set_state(CreateGiveaway.sponsor_channels)
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await message.answer("‚ùóÔ∏è –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç"
                         "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n"
                         "<b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à, "
                         "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</b>\n\n"
                         "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ:\n"
                         "1. <b>–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞</b> (@WinGiveBot) –≤ –≤–∞—à –∫–∞–Ω–∞–ª <u>–≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</u> (—ç—Ç–æ "
                         "–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª).\n"
                         "2. <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b> @channelname "
                         "(–∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞).\n\n"

                         "‚ö†Ô∏è<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –±—ã–ª–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª, "
                         "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>",
                         reply_markup=await get_callback_btns(
                             btns={"–†–æ–∑—ã–≥—Ä—ã—à –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫": "finish_sponsors"}))


@giveaway_create_router.message(StateFilter(CreateGiveaway.sponsor_channels))
async def create_giveaway_sponsor_channels(message: Message, state: FSMContext):
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
        chat_info = await channel_info(channel_id=channel_id)

        try:
            chat = await bot.get_chat(channel_id)
            if not chat:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if not (await chat.get_member(bot.id)).can_manage_chat:
                await message.answer(
                    f"‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chat_info.title} –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
                return

            data = await state.get_data()
            if "sponsor_channels" not in data:
                data["sponsor_channels"] = []

            if channel_id in data["sponsor_channels"]:
                # –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return

            data["sponsor_channels"].append(chat.id)
            await state.set_data(data)

            ch_text = (f"‚úÖ –ö–∞–Ω–∞–ª {chat_info.title} –¥–æ–±–∞–≤–ª–µ–Ω, –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "
                       f"—Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n\n"
                       "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫–∏.</b>"
                       "\n\n")
            if "sponsor_channels" in data:
                c = 1
                ch_text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
                for channel in data["sponsor_channels"]:
                    ch_text += f"{c}) {await get_channel_hyperlink(channel)}\n"
                    c += 1
            ch_text += ("\n<b>‚ùóÔ∏è –í–∞–∂–Ω–æ:</b>\n"
                        "–ù–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ "
                        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç!")
            await message.answer(text=ch_text,
                                 reply_markup=await get_callback_btns(
                                     btns={"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!": "finish_sponsors"}))
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞!")
    elif message.text.startswith("@"):
        channel_name = message.text
        try:
            chat = await bot.get_chat(channel_name)
            if not chat:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if not (await chat.get_member(bot.id)).can_manage_chat:
                await message.answer(
                    f"‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_name} –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
                return

            data = await state.get_data()
            if "sponsor_channels" not in data:
                data["sponsor_channels"] = []

            if chat.id in data["sponsor_channels"]:
                # –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return

            data["sponsor_channels"].append(chat.id)
            await state.set_data(data)

            ch_text = (f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω, –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "
                       f"—Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n\n"
                       "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫–∏.</b>"
                       "\n\n")

            if "sponsor_channels" in data:
                c = 1
                ch_text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
                for channel in data["sponsor_channels"]:
                    ch_text += f"{c}) {await get_channel_hyperlink(channel)}\n"
                    c += 1
            ch_text += ("\n<b>‚ùóÔ∏è –í–∞–∂–Ω–æ:</b>\n"
                        "–ù–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ"
                        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç!")
            await message.answer(text=ch_text,
                                 reply_markup=await get_callback_btns(
                                     btns={"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!": "finish_sponsors"}))
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞!")
    elif message.text.startswith("https://t.me/"):
        channel_name = f'@+{message.text.split("https://t.me/")[-1]}'
        try:
            chat = await bot.get_chat(channel_name)
            if not chat:
                await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if not (await chat.get_member(bot.id)).can_manage_chat:
                await message.answer(
                    f"‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_name} –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
                return

            data = await state.get_data()
            if "sponsor_channels" not in data:
                data["sponsor_channels"] = []

            if chat.id in data["sponsor_channels"]:
                # –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return

            data["sponsor_channels"].append(chat.id)
            await state.set_data(data)

            ch_text = (f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω, –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "
                       f"—Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n\n"
                       "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫–∏.</b>"
                       "\n\n")

            if "sponsor_channels" in data:
                c = 1
                ch_text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
                for channel in data["sponsor_channels"]:
                    ch_text += f"{c}) {await get_channel_hyperlink(channel)}\n"
                    c += 1
            ch_text += ("\n<b>‚ùóÔ∏è –í–∞–∂–Ω–æ:</b>\n"
                        "–ù–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ"
                        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç!")
            await message.answer(text=ch_text,
                                 reply_markup=await get_callback_btns(
                                     btns={"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!": "finish_sponsors"}))
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞!")


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.sponsor_channels), F.data == "finish_sponsors")
async def set_winners_count(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(CreateGiveaway.winners_count)
    await callback.message.answer("üé≤–°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É?")


@giveaway_create_router.message(StateFilter(CreateGiveaway.winners_count))
async def set_winners_count(message: Message, state: FSMContext, session: AsyncSession):
    if message.text.isdigit() and int(message.text) > 0:
        count = int(message.text)
        await state.update_data(winners_count=count)
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count}")

        user_id = message.from_user.id
        channels = await orm_get_channels_for_admin(session, user_id)
        btns = {}
        for channel in channels:
            chat = await bot.get_chat(channel.channel_id)
            btns[chat.title] = f"giv_channel_{channel.channel_id}"

        await state.set_state(CreateGiveaway.channel_id)
        await message.answer("–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?",
                             reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))

    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ <b><u>—á–∏—Å–ª–æ</u></b> –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!")


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.channel_id), F.data.startswith("giv_channel_"))
async def create_giveaway_channel_id(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    channel_id = int(callback.data.split("_")[-1])
    await state.update_data(channel_id=channel_id)
    await callback.message.answer("‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω!")

    data = await state.get_data()
    if "sponsor_channels" not in data:
        data["sponsor_channels"] = []
    if channel_id not in data["sponsor_channels"]:
        data["sponsor_channels"].append(channel_id)
    await state.set_data(data)

    await state.set_state(CreateGiveaway.extra_conditions)
    data = await state.get_data()
    text = ""
    text += "<b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n\n"
    if "sponsor_channels" not in data or data["channel_id"] not in data["sponsor_channels"]:
        channel = await channel_info(channel_id=data["channel_id"])
        text += f"‚úÖ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{channel.invite_link}'>{channel.title}</a>\n"
    if "sponsor_channels" in data:
        for channel in data["sponsor_channels"]:
            channel = await channel_info(channel_id=channel)
            text += f"‚úÖ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{channel.invite_link}'>{channel.title}</a>\n"
    await callback.message.answer(f"–°–µ–π—á–∞—Å –±–ª–æ–∫ —É—Å–ª–æ–≤–∏–π –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n{text}")
    await callback.message.answer("<b>‚ùóÔ∏è–í–ê–ñ–ù–û</b>:\n"
                                  "<i>–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</i>\n"
                                  "<i>—Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!</i>\n\n"
                                  "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n–±–æ—Ç–æ–º <b><i><u>–Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è</u></i></b>!\n\n"
                                  "üìù–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å\n"
                                  "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
                                  "–ø–æ–º–∏–º–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª(—ã)?\n\n"
                                  "<b>‚úÖ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ—Ç—É!</b>",
                                  reply_markup=await get_callback_btns(btns={
                                      "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π!": "finish_extra_conditions"
                                  }))


@giveaway_create_router.message(StateFilter(CreateGiveaway.extra_conditions))
async def get_extra_conditions(message: Message, state: FSMContext):
    await state.update_data(extra_conditions=message.html_text)
    await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.set_state(CreateGiveaway.post_datetime)
    await message.answer("‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                         reply_markup=await get_callback_btns(btns={"–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å!": "post_now",
                                                                    "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é!": "post_plan"}))


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.extra_conditions),
                                       F.data == "finish_extra_conditions")
async def ask_post_datetime(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(CreateGiveaway.post_datetime)
    await callback.message.answer("‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                                  reply_markup=await get_callback_btns(btns={"–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å!": "post_now",
                                                                             "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é!": "post_plan"}))


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.post_datetime), F.data.startswith("post_"))
async def create_giveaway_post_datetime(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    if callback.data == "post_now":
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_datetime = datetime.now(moscow_tz)
        await state.update_data(post_datetime=current_datetime.replace(tzinfo=None).isoformat())
        await callback.message.answer("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è!")
        await callback.message.answer("‚åõÔ∏è –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                                      reply_markup=await get_callback_btns(btns={
                                          "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!": "end_count",
                                          "–ü–æ –≤—Ä–µ–º–µ–Ω–∏!": "end_time"
                                      }))
        await state.set_state(CreateGiveaway.end_datetime)
    elif callback.data == "post_plan":
        await callback.message.answer("‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)"
                                      "\n\n"
                                      "–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")
        await callback.message.answer(text=await datetime_example())


@giveaway_create_router.message(StateFilter(CreateGiveaway.post_datetime), F.text)
async def set_giveaway_post_datetime(message: Message, state: FSMContext):
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ú–æ—Å–∫–≤–∞ (GMT+3)
        moscow_tz = pytz.timezone('Europe/Moscow')

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ user_datetime –≤ aware datetime –≤ –∑–æ–Ω–µ GMT+3
        user_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        user_datetime = moscow_tz.localize(user_datetime)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–æ–Ω–µ GMT+3
        current_time = datetime.now(moscow_tz)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if user_datetime < current_time + timedelta(minutes=5):
            await message.answer("‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
            return

        await state.update_data(post_datetime=user_datetime.replace(tzinfo=None).isoformat())
        await message.answer("‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        await state.set_state(CreateGiveaway.end_datetime)
        await message.answer("‚åõÔ∏è–ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                             reply_markup=await get_callback_btns(btns={
                                 "–ü–æ –≤—Ä–µ–º–µ–Ω–∏!": "end_time",
                                 "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!": "end_count"
                             }))
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç <b><u>–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏</u></b>!")


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.end_datetime), F.data.startswith("end_"))
async def create_giveaway_end_datetime_ask(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    if callback.data == "end_time":
        await state.set_state(CreateGiveaway.end_datetime)
        await callback.message.answer("üîö ‚è∞ <b>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ</b>\n"
                                      "<b>–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n"
                                      "(–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤\n"
                                      "—Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)"
                                      "\n\n"
                                      "<b>–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
                                      "(GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")
        await callback.message.answer(text=await datetime_example())

    elif callback.data == "end_count":
        await state.set_state(CreateGiveaway.end_count)
        await callback.message.answer("üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:"
                                      "\n\n"
                                      "‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —É—á–∞—Å—Ç–Ω–∏–∫ - —Ç–æ—Ç, –∫—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, "
                                      "–≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞, "
                                      "–∞ –∏–º–µ–Ω–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ)")


@giveaway_create_router.message(StateFilter(CreateGiveaway.end_datetime), F.text)
async def create_giveaway_end_datetime(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        post_datetime_str = data.get("post_datetime")
        moscow_tz = pytz.timezone('Europe/Moscow')

        post_datetime = datetime.fromisoformat(post_datetime_str)
        post_datetime = post_datetime.replace(tzinfo=None)  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ offset-naive

        user_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        user_datetime = moscow_tz.localize(user_datetime)
        user_datetime = user_datetime.replace(tzinfo=None)  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ offset-naive

        if post_datetime and user_datetime < post_datetime + timedelta(minutes=1):
            await message.answer("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
            return

        await state.update_data(end_datetime=user_datetime.isoformat())
        await message.answer("‚úÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
                             "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        await message.answer("‚ùóÔ∏è<b>–ü—Ä–µ–≤—å—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>")
        data = await state.get_data()
        await get_giveaway_preview(data=data, user_id=message.from_user.id, bot=bot)
        await message.answer(text=await get_giveaway_info_text(data),
                             reply_markup=await captcha_toggle("off"))
        await state.set_state(CreateGiveaway.captcha)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç <b><u>–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏</u></b>!")


@giveaway_create_router.message(StateFilter(CreateGiveaway.end_count), F.text)
async def create_giveaway_end_count(message: Message, state: FSMContext):
    data = await state.get_data()
    win_count = data.get("winners_count")
    if message.text.isdigit() and int(message.text) != 0 and int(message.text) >= win_count:
        count = int(message.text)
        await state.update_data(end_count=count)
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count}")
        data = await state.get_data()
        await state.update_data(captcha=False)
        await message.answer("‚ùóÔ∏è<b>–ü—Ä–µ–≤—å—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>")
        await get_giveaway_preview(data=data, user_id=message.from_user.id, bot=bot)
        await message.answer(text=await get_giveaway_info_text(data),
                             reply_markup=await captcha_toggle("off"))
        await state.set_state(CreateGiveaway.captcha)
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ <b><u>—á–∏—Å–ª–æ</u></b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.captcha), F.data.startswith("captcha_"))
async def toggle_captcha(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    change_to = str(callback.data.split("_")[-1])
    if change_to == "on":
        await state.update_data(captcha=True)
        new_btns = await captcha_toggle(change_to)
        await callback.message.answer(captcha_on_text)
    else:
        await state.update_data(captcha=False)
        new_btns = await captcha_toggle(change_to)
        await callback.message.answer(captcha_off_text)
    await callback.message.edit_reply_markup(reply_markup=new_btns)


@giveaway_create_router.callback_query(StateFilter(CreateGiveaway.captcha), F.data == "save_giveaway")
async def create_giveaway_captcha(callback, state, session):
    await callback.answer("")
    data = await state.get_data()

    user_id = callback.from_user.id

    end_datetime_str = data.get('end_datetime')
    if isinstance(end_datetime_str, str):
        end_datetime = datetime.fromisoformat(end_datetime_str)
        data['end_datetime'] = end_datetime.replace(tzinfo=None).isoformat()

    await orm_create_giveaway(session=session, data=data, user_id=user_id)
    await state.clear()
    await callback.message.answer("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                                  "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /my_gives\n\n"
                                  "–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start")
# @giveaway_router.message()
# async def create_giveaway_default(message: Message):
#     # await message.answer(str(message))
#     print(message)
#     await message.answer(str(message.media_group_id))
