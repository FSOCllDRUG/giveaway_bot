import re
from datetime import datetime, timedelta
from random import shuffle

import pytz
from aiogram import Router, F
from aiogram.filters import StateFilter, CommandStart, CommandObject, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from db.pg_models import GiveawayStatus
from db.pg_orm_query import orm_get_join_giveaway_data, orm_get_user_giveaways, orm_get_giveaway_by_id, \
    orm_get_giveaway_end_count, orm_delete_giveaway, orm_update_giveaway_end_conditions, orm_add_winners, \
    orm_get_user_data, orm_user_start
from db.r_engine import redis_conn
from db.r_operations import redis_get_participants, redis_get_participants_count
from filters.chat_type import ChatType
from keyboards.inline import get_callback_btns
from keyboards.reply import main_kb
from tools.captcha import generate_captcha
from tools.giveaway_scheduler import publish_giveaway_results
from tools.giveaway_utils import add_participant_and_update_button, check_giveaway_text
from tools.texts import decode_giveaway_id, format_giveaways, datetime_example, encode_giveaway_id
from tools.utils import is_subscribed, get_bot_link_to_start, is_admin

giveaway_interaction_router = Router()
giveaway_interaction_router.message.filter(ChatType("private"))

status_mapping = {
    GiveawayStatus.NOT_PUBLISHED: "‚è≥ –ñ–¥—ë—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    GiveawayStatus.PUBLISHED: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
    GiveawayStatus.FINISHED: "‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω"
}


class Captcha(StatesGroup):
    giveaway_id = State()
    awaiting_captcha = State()
    attempts_left = State()


@giveaway_interaction_router.message(
    CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'join_giveaway_(.+)'))),
    StateFilter(None))
async def start_join_giveaway(message: Message, command: CommandObject, session: AsyncSession, state: FSMContext):
    encoded_id = command.args.split("_")[-1]
    giveaway_id = await decode_giveaway_id(encoded_id)
    if await orm_get_user_data(session, user_id=message.from_user.id) is None:
        await orm_user_start(session, data={
            "user_id": message.from_user.id,
            "username": message.from_user.username if message.from_user.username is not None else None,
            "name": message.from_user.full_name,
        })
    giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)
    if giveaway is None:
        await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.", reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return
    elif giveaway.status == GiveawayStatus.FINISHED:
        await message.answer("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return
    user_id = message.from_user.id
    if user_id in await redis_get_participants(giveaway_id):
        await message.answer(f"‚ùóÔ∏è–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.",
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return
    sponsor_channels, captcha, end_count = await orm_get_join_giveaway_data(session=session,
                                                                            giveaway_id=giveaway_id)

    if await is_subscribed(channels=sponsor_channels, user_id=user_id) == False:
        await message.answer(
            f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, <b><u>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</u></b> –Ω–∞ –≤—Å–µ "
            f"—É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö.",
            reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return

    if captcha:
        captcha_text, captcha_image = await generate_captcha()
        await message.answer("‚ùóÔ∏è<b>–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –í—ã —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –ú—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è, "
                             "—á—Ç–æ –í—ã –Ω–µ –±–æ—Ç.</b>")
        await redis_conn.setex(f"captcha:{user_id}", 300, captcha_text)  # Save captcha in redis with a TTL
        input_file = BufferedInputFile(captcha_image.getvalue(), filename=f"captcha{user_id}.png")
        await message.answer_photo(photo=input_file, caption="‚ùì–ö–∞–∫–∏–µ —á–∏—Å–ª–∞ –í—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É "
                                                             "–æ—Ç–≤–µ—Ç!\n\n"
                                                             "<b>–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–∞–∂–º–∏—Ç–µ</b> /cancel")
        await state.set_state(Captcha.awaiting_captcha)
        await state.update_data(giveaway_id=giveaway_id, chat_id=message.chat.id, message_id=message.message_id)
    else:
        await add_participant_and_update_button(session, giveaway_id, user_id, giveaway.channel_id, giveaway.message_id)
        await state.clear()
        await message.answer(f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n"
                             f"<b>–¢–µ–ø–µ—Ä—å –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}!</b>",
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
        if end_count:
            if await redis_get_participants_count(giveaway_id) >= end_count:
                await publish_giveaway_results(giveaway_id)


@giveaway_interaction_router.message(
    CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'checkgive_(.+)'))),
    StateFilter(None))
async def start_check_giveaway(message: Message, command: CommandObject, session: AsyncSession):
    encoded_id = command.args.split("_")[-1]
    giveaway_id = await decode_giveaway_id(encoded_id)
    giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)
    if await orm_get_user_data(session, user_id=message.from_user.id) is None:
        await orm_user_start(session, data={
            "user_id": message.from_user.id,
            "username": message.from_user.username if message.from_user.username is not None else None,
            "name": message.from_user.full_name,
        })
    if giveaway is None:
        await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.",
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return
    elif giveaway.status == GiveawayStatus.PUBLISHED or giveaway.status == GiveawayStatus.NOT_PUBLISHED:
        await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
    else:
        await message.answer(text=await check_giveaway_text(session=session, giveaway_id=giveaway_id),
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
        return


@giveaway_interaction_router.message(StateFilter(Captcha.awaiting_captcha))
async def check_captcha(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    user_input = message.text

    captcha_text = await redis_conn.get(f"captcha:{user_id}")
    data = await state.get_data()
    attempts_left = data.get('attempts_left', 3)

    if captcha_text and user_input == captcha_text:
        await message.answer("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
        data = await state.get_data()
        giveaway_id = data.get('giveaway_id')
        giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)
        await add_participant_and_update_button(session, giveaway_id, user_id, giveaway.channel_id, giveaway.message_id)
        await message.answer(f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n"
                             f"<b>–¢–µ–ø–µ—Ä—å –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}!</b>")
        await state.clear()
        await add_participant_and_update_button(session, giveaway_id, user_id, message.chat.id, message.message_id)
        await redis_conn.delete(f"captcha:{user_id}")
        end_count = await orm_get_giveaway_end_count(session, giveaway_id)
        if end_count:
            if await redis_get_participants_count(giveaway_id) >= end_count:
                await publish_giveaway_results(giveaway_id)
    else:
        attempts_left -= 1
        if attempts_left > 0:
            await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
            await state.update_data(attempts_left=attempts_left)
        else:
            await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                                 reply_markup=await main_kb(await is_admin(message.from_user.id)))
            await state.clear()
            await redis_conn.delete(f"captcha:{user_id}")


@giveaway_interaction_router.message(F.text == "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
@giveaway_interaction_router.message(Command("my_gives"))
async def my_gives(message: Message, session: AsyncSession):
    my_givs = await format_giveaways(await orm_get_user_giveaways(session=session, user_id=message.from_user.id))
    initial_text = "üéÅ<b>–í–∞—à–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏!</b>\n\n"
    text = initial_text
    messages = []
    limit = 4096

    if not my_givs:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!")
        return

    for giv in my_givs:
        giv_text = f"{giv}\n"
        if len(text) + len(giv_text) > limit:
            messages.append(text)
            text = initial_text + giv_text
        else:
            text += giv_text

    messages.append(text)

    for msg in messages:
        await message.answer(msg)


@giveaway_interaction_router.message(F.text.startswith("/mygive"))
async def my_giveaway_details(message: Message, session: AsyncSession):
    giveaway_id = int(message.text.split("/mygive")[1].strip())
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
    giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)

    if not giveaway or giveaway.user_id != user_id:
        await message.answer(f"‚ùå –†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{giveaway_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    status = status_mapping.get(giveaway.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    post_url = giveaway.post_url
    participants_count = giveaway.participants_count if status == "–ó–∞–≤–µ—Ä—à—ë–Ω" else await redis_get_participants_count(
        giveaway_id)
    winners_count = giveaway.winners_count
    end_count = giveaway.end_count
    end_datetime = giveaway.end_datetime.strftime('%d.%m.%Y %H:%M') if giveaway.end_datetime else None
    post_datetime = giveaway.post_datetime.strftime('%d.%m.%Y %H:%M')
    text = (f"<b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ</b>{giveaway_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º: <a href='{post_url}'>–°—Å—ã–ª–∫–∞</a>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}\n"
            f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_datetime}\n")

    if end_count:
        text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {end_count}\n"
    if end_datetime:
        text += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_datetime}\n"
    btns = {}
    if status == "‚è≥ –ñ–¥—ë—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" or status == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω":
        btns.update({"–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞": f"change_end_condition_{giveaway_id}"})
    if status == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω":
        btns.update({"–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å": f"finish_giveaway_{giveaway_id}"})
    if status == "‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω":
        btns.update({"–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": f"get_result_link_{giveaway_id}"})
        btns.update({"–í—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π": f"add_winners_{giveaway_id}"})
    btns.update({"–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à": f"delete_giveaway_{giveaway_id}"})
    await message.answer(text, reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))


@giveaway_interaction_router.callback_query(F.data.startswith("delete_giveaway_"))
async def delete_giveaway(callback: CallbackQuery):
    await callback.answer("")
    g_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=await get_callback_btns(
        btns={"–î–∞": f"sure_delete_giveaway_{g_id}", "–ù–µ—Ç": "cancel"}, sizes=(1,)))


@giveaway_interaction_router.callback_query(F.data.startswith("sure_delete_giveaway_"))
async def delete_giveaway_sure(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("")
    g_id = int(callback.data.split("_")[-1])
    await orm_delete_giveaway(session=session, giveaway_id=g_id)
    await callback.message.delete()
    await callback.message.answer("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")


class EndCondition(StatesGroup):
    giveaway_id = State()
    data = State()


@giveaway_interaction_router.callback_query(F.data.startswith("change_end_condition_"))
async def change_end_condition(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    g_id = int(callback.data.split("_")[-1])
    await state.update_data(giveaway_id=g_id)
    await state.set_state(EndCondition.giveaway_id)
    await callback.message.answer("üóì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                                  reply_markup=await get_callback_btns(
                                      btns={"–ü–æ –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "change_end_count",
                                            "–ü–æ –≤—Ä–µ–º–µ–Ω–∏": "change_end_time",
                                            "–û—Ç–º–µ–Ω–∞": "cancel"},
                                      sizes=(1,)
                                  ))


@giveaway_interaction_router.callback_query(F.data == "change_end_count",
                                            StateFilter(EndCondition.giveaway_id))
async def change_end_count(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.answer("üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n",
                                  reply_markup=await get_callback_btns(
                                      btns={"–û—Ç–º–µ–Ω–∞": "cancel"},
                                      sizes=(1,)
                                  ))
    await state.set_state(EndCondition.data)


@giveaway_interaction_router.message(StateFilter(EndCondition.data), F.text.isdigit())
async def change_end_count_data(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    p_count = await redis_get_participants_count(data.get('giveaway_id'))
    if int(message.text) > p_count:
        giveaway_id = data.get('giveaway_id')
        end_count = int(message.text)
        await orm_update_giveaway_end_conditions(session=session, giveaway_id=giveaway_id, end_count=end_count,
                                                 end_datetime=None)
        await message.answer("üéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        await state.clear()
    else:
        await message.answer(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {p_count}!")


@giveaway_interaction_router.callback_query(F.data == "change_end_time",
                                            StateFilter(EndCondition.giveaway_id))
async def change_end_datetime(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.answer("üèÅ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)"
                                  "\n\n"
                                  "–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                                  reply_markup=await get_callback_btns(
                                      btns={"–û—Ç–º–µ–Ω–∞": "cancel"},
                                      sizes=(1,)
                                  ))
    await callback.message.answer(text=await datetime_example())
    await state.set_state(EndCondition.data)


@giveaway_interaction_router.message(StateFilter(EndCondition.data), F.text)
async def change_end_time_data(message: Message, state: FSMContext, session: AsyncSession):
    try:
        data = await state.get_data()
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ú–æ—Å–∫–≤–∞ (GMT+3)
        moscow_tz = pytz.timezone('Europe/Moscow')

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ user_datetime –≤ aware datetime –≤ –∑–æ–Ω–µ GMT+3
        user_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        user_datetime = moscow_tz.localize(user_datetime)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–æ–Ω–µ GMT+3
        current_time = datetime.now(moscow_tz)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if user_datetime < current_time + timedelta(minutes=5):
            await message.answer("‚ùå–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
            return

        end_time = user_datetime.replace(tzinfo=None).isoformat()
        await orm_update_giveaway_end_conditions(session=session, giveaway_id=data.get('giveaway_id'), end_count=None,
                                                 end_datetime=end_time)
        await message.answer("‚úÖ–í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç <b><u>–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏</u></b>!")


@giveaway_interaction_router.callback_query(F.data.startswith("finish_giveaway_"))
async def finish_giveaway(callback: CallbackQuery):
    await callback.answer("")
    giveaway_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
                                  reply_markup=await get_callback_btns(
                                      btns={"–î–∞": f"yes_finish_giveaway_{giveaway_id}",
                                            "–ù–µ—Ç": f"cancel"},
                                  ))


@giveaway_interaction_router.callback_query(F.data.startswith("yes_finish_giveaway_"))
async def finish_giveaway_sure(callback: CallbackQuery):
    await callback.answer("")
    giveaway_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à...")
    await publish_giveaway_results(giveaway_id)


@giveaway_interaction_router.callback_query(F.data.startswith("get_result_link_"))
async def get_result_link(callback: CallbackQuery):
    await callback.answer("")
    giveaway_id = int(callback.data.split("_")[-1])
    g_id = await encode_giveaway_id(giveaway_id)
    await callback.message.answer("–≠—Ç—É —Å—Å—ã–ª–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ –≤ "
                                  "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
                                  f"<code>{await get_bot_link_to_start()}checkgive_{g_id}</code>")


class AddWinners(StatesGroup):
    giveaway_id = State()


@giveaway_interaction_router.callback_query(F.data.startswith("add_winners_"))
async def add_winners(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    giveaway_id = int(callback.data.split("_")[-1])
    await state.update_data(giveaway_id=giveaway_id)
    await state.set_state(AddWinners.giveaway_id)
    await callback.message.answer("‚ùóÔ∏è<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n"
                                  "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è <b>7 –î–ù–ï–ô</b> –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!\n\n"
                                  "üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:",
                                  reply_markup=await get_callback_btns(
                                      btns={"–û—Ç–º–µ–Ω–∞": "cancel"},
                                      sizes=(1,)
                                  ))


@giveaway_interaction_router.message(StateFilter(AddWinners.giveaway_id), F.text.isdigit())
async def add_winners_data(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    giveaway_id = data.get('giveaway_id')
    await message.answer("‚úÖ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    giveaway = await orm_get_giveaway_by_id(session=session, giveaway_id=giveaway_id)
    add_win_count = int(message.text)
    participants = await redis_get_participants(giveaway_id)
    if not participants:
        await message.answer(reply_to_message_id=message.message_id, chat_id=message.from_user.id,
                             text="–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    shuffle(participants)

    winners = []
    for user_id in participants:
        if (await is_subscribed(giveaway.sponsor_channel_ids, user_id)) and user_id not in giveaway.winner_ids:
            winners.append(user_id)
            if len(winners) == add_win_count:
                break

    if not winners:
        await message.answer(reply_to_message_id=message.message_id,
                             text="–ù–µ –Ω–∞—à–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, "
                                  "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç!")
    if winners:
        text = ""
        c = 0
        for winners_id in winners:
            c += 1
            chat = await bot.get_chat(winners_id)
            user_name = chat.first_name if chat.first_name else "No name"
            user_username = f"@{chat.username}" if chat.username else ""
            text += f"\n{c}.<a href='tg://user?id={winners_id}'>{user_name}</a> ({user_username})"
        await message.answer(reply_to_message_id=message.message_id,
                             text=f"–í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n{text}")
        await orm_add_winners(session=session, giveaway_id=giveaway_id, new_winners=winners)
    await state.clear()
