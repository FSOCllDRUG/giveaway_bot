from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from db.pg_orm_query import orm_get_required_channels, orm_delete_channel, orm_add_channel, \
    orm_add_admin_to_channel
from db.pg_orm_query import (
    orm_user_start,
    orm_get_user_data,
    orm_get_channels_for_admin)
from db.r_operations import redis_check_channel, redis_get_channel_id
from filters.chat_type import ChatType
from keyboards.inline import get_callback_btns
from keyboards.reply import main_kb, get_keyboard
from middlewares.activity_middleware import ActivityMiddleware
from tools.texts import cbk_msg
from tools.utils import msg_to_cbk, channel_info, convert_id, is_subscribed, get_channel_hyperlink, is_admin

user_router = Router()
user_router.message.middleware(ActivityMiddleware())
user_router.message.filter(ChatType("private"))


@user_router.message(StateFilter("*"), F.text == "/cancel")
@user_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                         reply_markup=await main_kb(await is_admin(message.from_user.id)))


@user_router.callback_query(StateFilter("*"), F.data == "cancel")
async def cancel_fsm(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("")
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await main_kb(await is_admin(callback.from_user.id)))


# "/start" handler
@user_router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    text = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>WinGiveBot</b>!\n\n"
            "–ë–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö <b>telegram-–∫–∞–Ω–∞–ª–æ–≤</b> –∏ "
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "‚ùóÔ∏è–¢–∞–∫–∂–µ –≤ –ù–∞—à–µ–º –±–æ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç <b>–∫–∞–ø—á–∞</b> –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –±–æ—Ç–æ–≤.\n"
            "–ò —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π!"
            )
    if await orm_get_user_data(session, user_id=message.from_user.id) is not None:
        await message.answer(text,
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))
    else:
        await orm_user_start(session, data={
            "user_id": message.from_user.id,
            "username": message.from_user.username if message.from_user.username is not None else None,
            "name": message.from_user.full_name,
        })
        await message.answer(text,
                             reply_markup=await main_kb(await is_admin(message.from_user.id)))


@user_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: Message):
    await message.answer("<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!</b>", reply_markup=await main_kb(await is_admin(
        message.from_user.id)))


@user_router.message(Command("my_channels"))
@user_router.message(F.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã")
async def get_user_channels(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    channels = await orm_get_channels_for_admin(session, user_id)
    if not channels:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø ü´•",
                             reply_markup=await get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É": "add_channel"}))
        return
    channels_str = ""
    btns = {}
    for channel in channels:
        chat = await channel_info(channel.channel_id)
        if chat is None:
            await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ —Å id: " + str(channel.channel_id))
        channels_str += f"{await get_channel_hyperlink(channel.channel_id)}\n"
        btns[chat.title] = f"channel_{channel.channel_id}"
    btns["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É"] = "add_channel"
    await message.answer(f"‚ùóÔ∏è<b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n{channels_str}",
                         reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))


class AddChannel(StatesGroup):
    admin_id = State()
    channel_id = State()
    approve = State()


@user_router.callback_query(F.data == "add_channel")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    await state.update_data(admin_id=callback.from_user.id)
    await callback.answer("")
    await callback.message.answer("–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ <b>—Å–≤–æ–π</b> –∫–∞–Ω–∞–ª\n"
                                  "–≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                                  "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n"
                                  "\n‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
                                  "\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
                                  "\n‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                                  "<b>–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏—à—å –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</b>‚¨áÔ∏è",
                                  reply_markup=await get_callback_btns(btns={"–Ø –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞!": "added_to_channel"}))
    await state.set_state(AddChannel.channel_id)


@user_router.callback_query(StateFilter(AddChannel.channel_id), F.data == "added_to_channel")
async def bot_added_to_channel(callback: CallbackQuery, state: FSMContext):
    chat_id = await redis_get_channel_id(callback.from_user.id)
    if chat_id is None:
        await callback.answer("")
        await callback.message.answer("–¢—ã –º–µ–Ω—è –µ—â—ë –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª!")
        return
    else:
        await callback.answer("")
        await state.update_data(channel_id=chat_id)
        await callback.message.answer(f"–≠—Ç–æ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞:"
                                      f"\n‚Ä¢{await get_channel_hyperlink(chat_id)}?",
                                      reply_markup=await get_callback_btns(btns={"–î–∞": "yes", "–û—Ç–º–µ–Ω–∞": "cancel"}))
        await state.set_state(AddChannel.approve)


@user_router.callback_query(StateFilter(AddChannel.approve), F.data == "yes")
async def check_channel(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer("")
    data = await state.get_data()
    channel_id = data.get("channel_id")
    user_id = data.get("admin_id")
    if channel_id:
        check = await redis_check_channel(user_id, channel_id)
        if check:
            await orm_add_channel(session, channel_id)
            await orm_add_admin_to_channel(session, user_id, channel_id)
            await callback.message.answer(
                "‚úÖ <b>–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞</b>\n"
                "<b>–¥–æ–±–∞–≤–ª–µ–Ω(–∞) —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_give",
                reply_markup=await main_kb(await is_admin(callback.from_user.id)))
            await state.clear()

        else:
            await callback.message.answer("–õ–∏–±–æ —Ç—ã –º–µ–Ω—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤ –∫–∞–Ω–∞–ª, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(")
    else:
        await callback.message.answer("–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —É—Å–ª–æ–≤–∏—è–º –æ–ø–∏—Å–∞–Ω–Ω—ã–º –≤—ã—à–µ!")


@user_router.callback_query(F.data.startswith("channel_"))
async def channel_chosen(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[-1])
    channel = await channel_info(channel_id)
    btns = {
        "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç": f"create_post_{channel_id}",
        "–£–¥–∞–ª–∏—Ç—å –∏–∑ –±–æ—Ç–∞": f"delete_channel_{channel_id}",
    }
    if await is_admin(callback.from_user.id):
        btns["–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"] = f"required_status_{channel_id}"
    await callback.answer("")
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {channel.title}:\n",
        reply_markup=await get_callback_btns(
            btns=btns, sizes=(1,)
        )
    )


@user_router.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("")
    channel_id = int(callback.data.split("_")[-1])
    await orm_delete_channel(session, channel_id)
    await callback.message.answer("‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>",
                                  reply_markup=await main_kb(await is_admin(callback.from_user.id)))


@user_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def create_post(message: Message, session: AsyncSession):
    if await is_subscribed(channels=await orm_get_required_channels(session), user_id=message.from_user.id):
        user_id = message.from_user.id
        channels = await orm_get_channels_for_admin(session, user_id)
        if not channels:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø ü´•",
                                 reply_markup=await get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É": "add_channel"}))
            return
        channels_str = ""
        btns = {}
        for channel in channels:
            chat = await channel_info(channel.channel_id)
            channels_str += f"{await get_channel_hyperlink(channel.channel_id)}\n"
            btns[chat.title] = f"create_post_{channel.channel_id}"
        btns["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É"] = "add_channel"
        await message.answer("<b>–í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –¥–µ–ª–∞–µ–º –ø–æ—Å—Ç?</b>\n"
                             "üìä–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
                             reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))
    else:
        btns = {}
        required_channels = await orm_get_required_channels(session)
        for channel in required_channels:
            chat = await bot.get_chat(channel.channel_id)
            chat_invite_link = chat.invite_link
            btns[chat.title] = f"{chat_invite_link}"

        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ <b>¬´posting¬ª</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞(–æ–≤) –Ω–∏–∂–µ.\n\n"
                             "‚ùóÔ∏è<b>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ</b>\n"
                             "<b>—Å–Ω–æ–≤–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç¬ª</b>",
                             reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))


class CreatePost(StatesGroup):
    channel_id = State()
    message = State()
    buttons = State()


# Channel post handlers starts
@user_router.callback_query(StateFilter(None), F.data.startswith("create_post_"))
async def make_post(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    required_channels = await orm_get_required_channels(session)
    if await is_subscribed(channels=required_channels, user_id=callback.from_user.id):
        await state.set_state(CreatePost.channel_id)
        await callback.answer("")
        channel_id = int(callback.data.split("_")[-1])
        await state.update_data(channel_id=channel_id)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å\n\n"
                                      "<b>‚ùóÔ∏è–í–ê–ñ–ù–û.</b>\n\n"
                                      "–í –ø–æ—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å\n"
                                      "–ø—Ä–∏–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ <b><u>–æ–¥–∏–Ω</u></b> —Ñ–∞–π–ª!\n\n"
                                      "<i>–§–∞–π–ª - —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç</i>\n"
                                      "<i>–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>",
                                      reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞",
                                                                placeholder="–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –ø–æ—Å—Ç–∞"
                                                                )
                                      )
        await state.set_state(CreatePost.message)
    else:
        await callback.answer("")
        btns = {}
        required_channels = await orm_get_required_channels(session)
        for channel in required_channels:
            chat = await bot.get_chat(channel.channel_id)
            chat_invite_link = chat.invite_link
            btns[chat.title] = f"{chat_invite_link}"

        await callback.message.answer(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ <b>¬´posting¬ª</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞(–æ–≤) –Ω–∏–∂–µ.\n\n"
            "‚ùóÔ∏è<b>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ</b>\n"
            "<b>—Å–Ω–æ–≤–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç¬ª</b>",
            reply_markup=await get_callback_btns(btns=btns, sizes=(1,)))
        await state.clear()


@user_router.message(StateFilter(CreatePost.message))
async def get_message_for_post(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(CreatePost.buttons)
    await message.reply("–ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å URL-–∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É?", reply_markup=await get_callback_btns(
        btns={"–î–∞": "add_btns",
              "–ü–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫": "confirm_post", "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_post"}
    )
                        )


@user_router.callback_query(StateFilter(CreatePost.buttons), F.data == "add_btns")
async def add_btns_post(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer(cbk_msg)


@user_router.message(StateFilter(CreatePost.buttons), F.text.contains(":"))
async def btns_to_data(message: Message, state: FSMContext):
    await state.update_data(buttons=await msg_to_cbk(message))
    data = await state.get_data()
    await message.answer(f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ:")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=data[
        "message"],
                           reply_markup=await get_callback_btns(btns=data["buttons"]))
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—Å—Ç–∏–Ω–≥—É?",
                         reply_markup=await get_callback_btns(btns={"–î–∞": "confirm_post",
                                                                    "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_post"}))


@user_router.callback_query(StateFilter(CreatePost.message), F.data == "cancel_post")
@user_router.callback_query(StateFilter(CreatePost.buttons), F.data == "cancel_post")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    current_state = await state.get_state()

    if current_state is not None:
        await state.set_state(CreatePost.message)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å")


@user_router.callback_query(StateFilter("*"), F.data == "confirm_post")
async def confirm_post(callback: CallbackQuery, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.from_user.id):
        await callback.answer("")
        data = await state.get_data()
        if "buttons" not in data:
            post_id = await bot.copy_message(chat_id=data["channel_id"], from_chat_id=callback.message.chat.id,
                                             message_id=data["message"])
        else:
            post_id = await bot.copy_message(chat_id=data["channel_id"], from_chat_id=callback.message.chat.id,
                                             message_id=data["message"],
                                             reply_markup=await get_callback_btns(btns=data["buttons"]))

        await callback.message.answer("‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n"
                                      f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: https://t.me/c/{await convert_id(data['channel_id'])}"
                                      f"/{post_id.message_id}",
                                      reply_markup=await main_kb(await is_admin(callback.from_user.id)))

        await state.clear()


@user_router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer("üí¨<b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
                         "https://t.me/mrktmng\n\n"

                         "<b>üóíÔ∏è–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ</b>\n"
                         "<b>–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n"
                         "https://t.me/WinGiveInfo\n\n"

                         "–ï—Å–ª–∏ –í—ã —Å–¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏,—Ç–æ —É –í–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!")


@user_router.message(Command("developer"))
async def developer(message: Message):
    await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         f"Telegram: <b><i><u><a href='tg://user?id=6092344340'>*–ù–ê–ü–ò–°–ê–¢–¨*</a></u></i></b>\n"
                         f"Email: fsoclldrug@gmail.com")

# @user_router.message(F.photo)
# async def get_photo_id(message: Message):
#     photo_id = message.photo[-1].file_id
#     await message.answer(f"id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n<pre>{photo_id}</pre>")
